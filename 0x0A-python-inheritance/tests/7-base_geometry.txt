# run test with python3 -m doctest -v ./tests/7-base_geometry.txt

===============================
 How to Use 7-base_geometry.py
===============================

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

GOOD USER
=========

Instances of class has type...

::

    >>> pumpbase = BaseGeometry()
    >>> type(pumpbase)
    <class '7-base_geometry.BaseGeometry'>

Pass in a name and value...

::

    >>> pumpbase = BaseGeometry()
    >>> pumpbase.integer_validator("UWU", 4)

BAD USER
========

Instantiation requires valid inputs...

::

    >>> pb = BaseGeometry()
    >>> pb.integer_validator("height", 'v')
    Traceback (most recent call last):
    TypeError: height must be an integer

::

    >>> pb = BaseGeometry()
    >>> pb.integer_validator("height")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

::

    >>> pb = BaseGeometry()
    >>> pb.integer_validator("height", -4)
    Traceback (most recent call last):
    ValueError: height must be greater than 0

::

    >>> pb = BaseGeometry()
    >>> pb.integer_validator("height", [3, 3])
    Traceback (most recent call last):
    TypeError: height must be an integer

::

    >>> pb = BaseGeometry()
    >>> pb.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

::

    >>> pb = BaseGeometry()
    >>> pb.integer_validator("None", None)
    Traceback (most recent call last):
    TypeError: None must be an integer

::

    >>> pb = BaseGeometry()
    >>> pb.integer_validator("None", True)
    Traceback (most recent call last):
    TypeError: None must be an integer
