# run test with python3 -m doctest -v ./tests/1-my_list.txt

===============================
 How to Use 1-my_list.py
===============================

>>> MyList = __import__('1-my_list').MyList

GOOD USER
=========

Can print their lists sorted (ascending)...

::

    >>> MyList([8, 6, 7]).print_sorted()
    [6, 7, 8]

::

    >>> MyList(["Susan", "Timma!", "Thaddius"]).print_sorted()
    ['Susan', 'Thaddius', 'Timma!']

Can has empty list... but why doe...

::

    >>> MyList([]).print_sorted()
    []

Base class list methods are inherited...

::

    >>> das_list = MyList()
    >>> das_list.append('I')
    >>> das_list.append('H')
    >>> print(das_list)
    ['I', 'H']
    >>> das_list.print_sorted()
    ['H', 'I']
    >>> print(das_list)
    ['I', 'H']

Class instances have MyList type...

::

    >>> das_list = MyList()
    >>> type(das_list)
    <class '1-my_list.MyList'>
    >>> print(das_list.print_sorted)
    <bound method MyList.print_sorted of []>

Will work on dicts...kinda...

::

    >>> MyList({"richard": 1, "dick": 2}).print_sorted()
    ['dick', 'richard']

BAD USER
========

Class method takes no args (other than self obv.)

::

    >>> MyList([8, 6, 7]).print_sorted('n')
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

Method can no sort dif data types...

::

    >>> MyList([1, 2, 'v']).print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'str' and 'int'

Method won't accept multiple lists...

::

    >>> MyList([1, 2], [4, 3]).print_sorted()
    Traceback (most recent call last):
    TypeError: list expected at most 1 argument, got 2

Method can't sort NoneType...

::

    >>> MyList(None).print_sorted()
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable
